// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UserModel {
    id           String               @id @default(cuid())
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
    email        String               @unique
    login        String               @unique
    role         RoleEnum             @default(User)
    passwordHash String
    profile      ProfileModel?
    units        UnitsModel?
    recipes      RecipeModel[]
    challenges   UserChallengeModel[]
}

model ProfileModel {
    firstName String
    lastName  String?
    birth     DateTime
    city      String?
    sex       SexEnum

    userId String    @unique
    user   UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnitsModel {
    weight       Int
    height       Int
    bloodGlucose Int?

    userId String    @unique
    user   UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecipeModel {
    id          Int             @id @default(autoincrement())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    title       String
    description String?
    image       String
    video       String?
    calories    Int
    cookingTime Int?
    difficulty  DifficultyEnum?
    user        UserModel?      @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId      String?

    protein Decimal
    fat     Decimal
    carbs   Decimal

    category   CategoryModel? @relation(fields: [categoryId], references: [id])
    categoryId Int?

    dietType    DietTypeModel? @relation(fields: [dietsTypeId], references: [id])
    dietsTypeId Int?

    preparation   PreparationModel? @relation(fields: [preparationId], references: [id])
    preparationId Int?
}

model CategoryModel {
    id      Int           @id @default(autoincrement())
    title   String
    icon    String
    recipes RecipeModel[]
}

model PreparationModel {
    id      Int           @id @default(autoincrement())
    title   String
    icon    String
    recipes RecipeModel[]
}

model DietTypeModel {
    id      Int           @id @default(autoincrement())
    title   String
    icon    String
    recipes RecipeModel[]
}

model ChallengeModel {
    id             Int                  @id @default(autoincrement())
    title          String
    description    String
    image          String
    color          String
    durationDays   Int
    difficulty     DifficultyEnum       @default(Easy)
    tips           String[]
    userChallenges UserChallengeModel[]
}

model UserChallengeModel {
    id          Int            @id @default(autoincrement())
    startDate   DateTime
    status      StatusEnum     @default(Started)
    user        UserModel      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    challenge   ChallengeModel @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId Int
}

enum DifficultyEnum {
    Easy
    Normal
    Hard
}

enum StatusEnum {
    Started
    Canceled
    Finished
}

enum SexEnum {
    Male
    Female
}

enum RoleEnum {
    User
    Admin
}
